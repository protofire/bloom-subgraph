// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get linkId(): BigInt {
    let value = this.get("linkId");
    return value.toBigInt();
  }

  set linkId(value: BigInt) {
    this.set("linkId", Value.fromBigInt(value));
  }

  get subjectOf(): Array<string> {
    let value = this.get("subjectOf");
    return value.toStringArray();
  }

  set subjectOf(value: Array<string>) {
    this.set("subjectOf", Value.fromStringArray(value));
  }

  get attesterOf(): Array<string> {
    let value = this.get("attesterOf");
    return value.toStringArray();
  }

  set attesterOf(value: Array<string>) {
    this.set("attesterOf", Value.fromStringArray(value));
  }

  get addresses(): Array<string> {
    let value = this.get("addresses");
    return value.toStringArray();
  }

  set addresses(value: Array<string>) {
    this.set("addresses", Value.fromStringArray(value));
  }
}

export class Attestation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Attestation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Attestation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Attestation", id.toString(), this);
  }

  static load(id: string): Attestation | null {
    return store.get("Attestation", id) as Attestation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subjectAddress(): string {
    let value = this.get("subjectAddress");
    return value.toString();
  }

  set subjectAddress(value: string) {
    this.set("subjectAddress", Value.fromString(value));
  }

  get subjectAccount(): string | null {
    let value = this.get("subjectAccount");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subjectAccount(value: string | null) {
    if (value === null) {
      this.unset("subjectAccount");
    } else {
      this.set("subjectAccount", Value.fromString(value as string));
    }
  }

  get attesterAddress(): string {
    let value = this.get("attesterAddress");
    return value.toString();
  }

  set attesterAddress(value: string) {
    this.set("attesterAddress", Value.fromString(value));
  }

  get attesterAccount(): string | null {
    let value = this.get("attesterAccount");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set attesterAccount(value: string | null) {
    if (value === null) {
      this.unset("attesterAccount");
    } else {
      this.set("attesterAccount", Value.fromString(value as string));
    }
  }

  get requester(): Bytes {
    let value = this.get("requester");
    return value.toBytes();
  }

  set requester(value: Bytes) {
    this.set("requester", Value.fromBytes(value));
  }

  get dataHash(): Bytes {
    let value = this.get("dataHash");
    return value.toBytes();
  }

  set dataHash(value: Bytes) {
    this.set("dataHash", Value.fromBytes(value));
  }

  get createdDuringMigration(): boolean {
    let value = this.get("createdDuringMigration");
    return value.toBoolean();
  }

  set createdDuringMigration(value: boolean) {
    this.set("createdDuringMigration", Value.fromBoolean(value));
  }
}

export class Address extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Address entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Address entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Address", id.toString(), this);
  }

  static load(id: string): Address | null {
    return store.get("Address", id) as Address | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get latestLinkBlock(): BigInt | null {
    let value = this.get("latestLinkBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestLinkBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("latestLinkBlock");
    } else {
      this.set("latestLinkBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get subjectOf(): Array<string> {
    let value = this.get("subjectOf");
    return value.toStringArray();
  }

  set subjectOf(value: Array<string>) {
    this.set("subjectOf", Value.fromStringArray(value));
  }

  get attesterOf(): Array<string> {
    let value = this.get("attesterOf");
    return value.toStringArray();
  }

  set attesterOf(value: Array<string>) {
    this.set("attesterOf", Value.fromStringArray(value));
  }

  get linksHistory(): Array<string> {
    let value = this.get("linksHistory");
    return value.toStringArray();
  }

  set linksHistory(value: Array<string>) {
    this.set("linksHistory", Value.fromStringArray(value));
  }
}

export class LinkHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LinkHistoryItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LinkHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LinkHistoryItem", id.toString(), this);
  }

  static load(id: string): LinkHistoryItem | null {
    return store.get("LinkHistoryItem", id) as LinkHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get creationBlock(): BigInt {
    let value = this.get("creationBlock");
    return value.toBigInt();
  }

  set creationBlock(value: BigInt) {
    this.set("creationBlock", Value.fromBigInt(value));
  }

  get deletionBlock(): BigInt | null {
    let value = this.get("deletionBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deletionBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("deletionBlock");
    } else {
      this.set("deletionBlock", Value.fromBigInt(value as BigInt));
    }
  }
}
