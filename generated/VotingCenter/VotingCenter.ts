// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class PollCreated extends EthereumEvent {
  get params(): PollCreated__Params {
    return new PollCreated__Params(this);
  }
}

export class PollCreated__Params {
  _event: PollCreated;

  constructor(event: PollCreated) {
    this._event = event;
  }

  get poll(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get author(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VotingCenter extends SmartContract {
  static bind(address: Address): VotingCenter {
    return new VotingCenter("VotingCenter", address);
  }

  numPolls(): BigInt {
    let result = super.call("numPolls", []);

    return result[0].toBigInt();
  }

  try_numPolls(): CallResult<BigInt> {
    let result = super.tryCall("numPolls", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  polls(param0: BigInt): Address {
    let result = super.call("polls", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_polls(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("polls", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  allPolls(): Array<Address> {
    let result = super.call("allPolls", []);

    return result[0].toAddressArray();
  }

  try_allPolls(): CallResult<Array<Address>> {
    let result = super.tryCall("allPolls", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  createPoll(
    _name: string,
    _chainId: BigInt,
    _ipfsHash: Bytes,
    _numOptions: i32,
    _startTime: BigInt,
    _endTime: BigInt
  ): Address {
    let result = super.call("createPoll", [
      EthereumValue.fromString(_name),
      EthereumValue.fromUnsignedBigInt(_chainId),
      EthereumValue.fromBytes(_ipfsHash),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(_numOptions)),
      EthereumValue.fromUnsignedBigInt(_startTime),
      EthereumValue.fromUnsignedBigInt(_endTime)
    ]);

    return result[0].toAddress();
  }

  try_createPoll(
    _name: string,
    _chainId: BigInt,
    _ipfsHash: Bytes,
    _numOptions: i32,
    _startTime: BigInt,
    _endTime: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("createPoll", [
      EthereumValue.fromString(_name),
      EthereumValue.fromUnsignedBigInt(_chainId),
      EthereumValue.fromBytes(_ipfsHash),
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(_numOptions)),
      EthereumValue.fromUnsignedBigInt(_startTime),
      EthereumValue.fromUnsignedBigInt(_endTime)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class CreatePollCall extends EthereumCall {
  get inputs(): CreatePollCall__Inputs {
    return new CreatePollCall__Inputs(this);
  }

  get outputs(): CreatePollCall__Outputs {
    return new CreatePollCall__Outputs(this);
  }
}

export class CreatePollCall__Inputs {
  _call: CreatePollCall;

  constructor(call: CreatePollCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _chainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ipfsHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _numOptions(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreatePollCall__Outputs {
  _call: CreatePollCall;

  constructor(call: CreatePollCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
